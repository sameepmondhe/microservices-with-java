services:
  # config-server:
  #   build:
  #     context: .
  #     dockerfile: config-server/Dockerfile
  #   ports:
  #     - "8888:8888"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=dev
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - msnet

  accounts:
    build:
      context: ./accounts
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_IMPORT=optional:configserver:http://host.docker.internal:8888
    # depends_on:
    #   - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - msnet

  cards:
    build:
      context: ./cards
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_IMPORT=optional:configserver:http://host.docker.internal:8888
    # depends_on:
    #   - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - msnet

  loans:
    build:
      context: ./loans
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_IMPORT=optional:configserver:http://host.docker.internal:8888
    # depends_on:
    #   - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - msnet

  customer:
    build:
      context: ./customer
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_IMPORT=optional:configserver:http://host.docker.internal:8888
    # depends_on:
    #   - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - msnet

  # Loki - Log aggregation system
  loki:
    image: grafana/loki:2.8.3
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml -log.level=warn
    environment:
      - JAEGER_AGENT_HOST=jaeger
      - LOKI_LOG_LEVEL=warn
    networks:
      - msnet

  # Promtail - Log collector for Loki
  promtail:
    image: grafana/promtail:2.8.3
    container_name: promtail
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yml
      - ./accounts.log:/var/log/accounts.log:ro
      - ./cards.log:/var/log/cards.log:ro
      - ./loans.log:/var/log/loans.log:ro
      - ./customers.log:/var/log/customers.log:ro
      - ./config-server.log:/var/log/config-server.log:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - msnet
    depends_on:
      - loki

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - cadvisor
    networks:
      - msnet
    restart: always

  # Node Exporter - Host metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.nfsd'  # Disable the problematic nfsd collector
      - '--collector.disable-defaults'  # Disable defaults so we can carefully control what's enabled
      - '--collector.cpu'  # Enable CPU collector
      - '--collector.diskstats'  # Enable disk stats
      - '--collector.meminfo'  # Enable memory info
      - '--collector.loadavg'  # Enable load average
      - '--collector.filesystem'  # Enable filesystem stats
      - '--collector.netdev'  # Enable network device stats
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - msnet
    restart: always

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      # Minimal required mounts for macOS to prevent race conditions
      - /var/run:/var/run:ro
      - /var/lib/docker/:/var/lib/docker:ro
      # Mount the container hints file to provide explicit configuration
      - ./cadvisor-container-hints.json:/etc/cadvisor/container_hints.json:ro
    environment:
      - CADVISOR_STORAGE_DRIVER=
      - CADVISOR_HOUSEKEEPING_INTERVAL=30s
    command:
      - --disable_metrics=disk,diskIO,network,tcp,udp
      - --docker_only=true
      - --store_container_labels=false
      - --allow_dynamic_housekeeping=false
      - --housekeeping_interval=30s
      - --disable_root_cgroup_stats=true
      - --docker_only=true
      - --max_housekeeping_interval=60s
      - --event_storage_event_limit=0
      - --event_storage_age_limit=0
      - --container_hints=/etc/cadvisor/container_hints.json
    networks:
      - msnet
    restart: always
    privileged: true

  # Grafana - Visualization platform
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      # Mount dashboards and provisioning configurations
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/system-metrics-fixed.json
    networks:
      - msnet
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  msnet:
    driver: bridge

volumes:
  grafana-storage:
  prometheus-data:

