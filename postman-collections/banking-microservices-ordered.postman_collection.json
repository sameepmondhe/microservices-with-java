{
	"info": {
		"_postman_id": "b5e9c5a1-4d8f-4a5e-9b0e-8d3f3d9e4c2d",
		"name": "Banking Microservices",
		"description": "API tests for banking microservices application through gateway server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Customers Service",
			"item": [
				{
					"name": "1.1. Create Customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response has customer ID\", function() {",
									"    pm.expect(responseJson.customerId).to.exist;",
									"});",
									"",
									"// Store customer ID for later use",
									"pm.environment.set(\"customer_id_1\", responseJson.customerId);",
									"console.log(\"Created Customer 1 with ID: \" + responseJson.customerId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerId\": \"C1-{{$timestamp}}\",\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"123-456-7890\",\n    \"address\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"USA\",\n    \"status\": \"Active\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/customers/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"customers",
								"create"
							]
						},
						"description": "Create first test customer"
					},
					"response": []
				},
				{
					"name": "1.2. Create Customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response has customer ID\", function() {",
									"    pm.expect(responseJson.customerId).to.exist;",
									"});",
									"",
									"// Store customer ID for later use",
									"pm.environment.set(\"customer_id_2\", responseJson.customerId);",
									"console.log(\"Created Customer 2 with ID: \" + responseJson.customerId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerId\": \"C2-{{$timestamp}}\",\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane.smith@example.com\",\n    \"phone\": \"987-654-3210\",\n    \"address\": \"456 Oak Avenue\",\n    \"city\": \"San Francisco\",\n    \"state\": \"CA\",\n    \"zipCode\": \"94107\",\n    \"country\": \"USA\",\n    \"status\": \"Active\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/customers/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"customers",
								"create"
							]
						},
						"description": "Create second test customer"
					},
					"response": []
				},
				{
					"name": "1.3. Get All Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(Array.isArray(responseJson)).to.be.true;",
									"});",
									"",
									"pm.test(\"At least two customers exist\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.be.greaterThan(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/customers/getAll",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"customers",
								"getAll"
							]
						},
						"description": "Get a list of all customers"
					},
					"response": []
				},
				{
					"name": "1.4. Get Customer 1 by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Customer ID matches expected value\", function() {",
									"    pm.expect(responseJson.customerId).to.eql(pm.environment.get(\"customer_id_1\"));",
									"});",
									"",
									"pm.test(\"Customer name is correct\", function() {",
									"    pm.expect(responseJson.name).to.eql(\"John Doe\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/customers/{{customer_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"customers",
								"{{customer_id_1}}"
							]
						},
						"description": "Retrieve customer 1 by ID"
					},
					"response": []
				},
				{
					"name": "1.5. Update Customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Customer was updated\", function() {",
									"    pm.expect(responseJson.name).to.eql(\"John Doe Updated\");",
									"    pm.expect(responseJson.address).to.eql(\"789 Updated Street\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe Updated\",\n    \"email\": \"john.updated@example.com\",\n    \"phone\": \"555-123-4567\",\n    \"address\": \"789 Updated Street\",\n    \"city\": \"Boston\",\n    \"state\": \"MA\",\n    \"zipCode\": \"02101\",\n    \"country\": \"USA\",\n    \"status\": \"Active\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/customers/{{customer_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"customers",
								"{{customer_id_1}}"
							]
						},
						"description": "Update customer 1"
					},
					"response": []
				},
				{
					"name": "1.6. Verify Customer 1 Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Customer updates were saved\", function() {",
									"    pm.expect(responseJson.name).to.eql(\"John Doe Updated\");",
									"    pm.expect(responseJson.email).to.eql(\"john.updated@example.com\");",
									"    pm.expect(responseJson.address).to.eql(\"789 Updated Street\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/customers/{{customer_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"customers",
								"{{customer_id_1}}"
							]
						},
						"description": "Verify customer 1 was properly updated"
					},
					"response": []
				}
			],
			"description": "Tests for the customer service"
		},
		{
			"name": "2. Accounts Service",
			"item": [
				{
					"name": "2.1. Create Account 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response has account ID\", function() {",
									"    pm.expect(responseJson.accountId).to.exist;",
									"});",
									"",
									"// Store account ID for later use",
									"pm.environment.set(\"account_id_1\", responseJson.accountId);",
									"console.log(\"Created Account 1 with ID: \" + responseJson.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"A1-{{$timestamp}}\",\n    \"accountName\": \"Savings Account\",\n    \"accountType\": \"Savings\",\n    \"accountStatus\": \"Active\",\n    \"accountBalance\": \"1000.00\",\n    \"accountCurrency\": \"USD\",\n    \"accountCreatedDate\": \"{{$isoTimestamp}}\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/accounts/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"accounts",
								"create"
							]
						},
						"description": "Create a new savings account"
					},
					"response": []
				},
				{
					"name": "2.2. Create Account 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response has account ID\", function() {",
									"    pm.expect(responseJson.accountId).to.exist;",
									"});",
									"",
									"// Store account ID for later use",
									"pm.environment.set(\"account_id_2\", responseJson.accountId);",
									"console.log(\"Created Account 2 with ID: \" + responseJson.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": \"A2-{{$timestamp}}\",\n    \"accountName\": \"Checking Account\",\n    \"accountType\": \"Checking\",\n    \"accountStatus\": \"Active\",\n    \"accountBalance\": \"2500.00\",\n    \"accountCurrency\": \"USD\",\n    \"accountCreatedDate\": \"{{$isoTimestamp}}\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/accounts/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"accounts",
								"create"
							]
						},
						"description": "Create a new checking account"
					},
					"response": []
				},
				{
					"name": "2.3. Get All Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(Array.isArray(responseJson)).to.be.true;",
									"});",
									"",
									"pm.test(\"At least two accounts exist\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.be.greaterThan(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/accounts/getAll",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"accounts",
								"getAll"
							]
						},
						"description": "Get a list of all accounts"
					},
					"response": []
				},
				{
					"name": "2.4. Get Account 1 by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Account ID matches expected value\", function() {",
									"    pm.expect(responseJson.accountId).to.eql(pm.environment.get(\"account_id_1\"));",
									"});",
									"",
									"pm.test(\"Account type is savings\", function() {",
									"    pm.expect(responseJson.accountType).to.eql(\"Savings\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/accounts/{{account_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"accounts",
								"{{account_id_1}}"
							]
						},
						"description": "Retrieve account 1 by ID"
					},
					"response": []
				},
				{
					"name": "2.5. Update Account 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Account balance was updated\", function() {",
									"    pm.expect(responseJson.accountBalance).to.eql(\"2000.00\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountName\": \"Updated Savings Account\",\n    \"accountType\": \"Savings\",\n    \"accountStatus\": \"Active\",\n    \"accountBalance\": \"2000.00\",\n    \"accountCurrency\": \"USD\",\n    \"accountCreatedDate\": \"{{$isoTimestamp}}\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/accounts/{{account_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"accounts",
								"{{account_id_1}}"
							]
						},
						"description": "Update account 1"
					},
					"response": []
				},
				{
					"name": "2.6. Verify Account 1 Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Account updates were saved\", function() {",
									"    pm.expect(responseJson.accountName).to.eql(\"Updated Savings Account\");",
									"    pm.expect(responseJson.accountBalance).to.eql(\"2000.00\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/accounts/{{account_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"accounts",
								"{{account_id_1}}"
							]
						},
						"description": "Verify account 1 was properly updated"
					},
					"response": []
				}
			],
			"description": "Tests for the accounts service"
		},
		{
			"name": "3. Cards Service",
			"item": [
				{
					"name": "3.1. Create Card 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response has card ID\", function() {",
									"    pm.expect(responseJson.cardId).to.exist;",
									"});",
									"",
									"// Store card ID for later use",
									"pm.environment.set(\"card_id_1\", responseJson.cardId);",
									"console.log(\"Created Card 1 with ID: \" + responseJson.cardId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardId\": \"C1-{{$timestamp}}\",\n    \"cardNumber\": \"4111-1111-1111-1111\",\n    \"cardType\": \"Credit\",\n    \"cardStatus\": \"Active\",\n    \"cardHolderName\": \"John Doe\",\n    \"cardExpiry\": \"05/2030\",\n    \"cvv\": \"123\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/cards/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"cards",
								"create"
							]
						},
						"description": "Create a new credit card"
					},
					"response": []
				},
				{
					"name": "3.2. Create Card 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response has card ID\", function() {",
									"    pm.expect(responseJson.cardId).to.exist;",
									"});",
									"",
									"// Store card ID for later use",
									"pm.environment.set(\"card_id_2\", responseJson.cardId);",
									"console.log(\"Created Card 2 with ID: \" + responseJson.cardId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardId\": \"C2-{{$timestamp}}\",\n    \"cardNumber\": \"5555-5555-5555-4444\",\n    \"cardType\": \"Debit\",\n    \"cardStatus\": \"Active\",\n    \"cardHolderName\": \"Jane Smith\",\n    \"cardExpiry\": \"10/2028\",\n    \"cvv\": \"456\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/cards/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"cards",
								"create"
							]
						},
						"description": "Create a new debit card"
					},
					"response": []
				},
				{
					"name": "3.3. Get All Cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(Array.isArray(responseJson)).to.be.true;",
									"});",
									"",
									"pm.test(\"At least two cards exist\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.be.greaterThan(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/cards/getAll",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"cards",
								"getAll"
							]
						},
						"description": "Get a list of all cards"
					},
					"response": []
				},
				{
					"name": "3.4. Get Card 1 by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Card ID matches expected value\", function() {",
									"    pm.expect(responseJson.cardId).to.eql(pm.environment.get(\"card_id_1\"));",
									"});",
									"",
									"pm.test(\"Card type is credit\", function() {",
									"    pm.expect(responseJson.cardType).to.eql(\"Credit\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/cards/{{card_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"cards",
								"{{card_id_1}}"
							]
						},
						"description": "Retrieve card 1 by ID"
					},
					"response": []
				},
				{
					"name": "3.5. Update Card 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Card status was updated\", function() {",
									"    pm.expect(responseJson.cardStatus).to.eql(\"Inactive\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardNumber\": \"4111-1111-1111-1111\",\n    \"cardType\": \"Credit\",\n    \"cardStatus\": \"Inactive\",\n    \"cardHolderName\": \"John Doe Updated\",\n    \"cardExpiry\": \"12/2030\",\n    \"cvv\": \"789\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/cards/{{card_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"cards",
								"{{card_id_1}}"
							]
						},
						"description": "Update card 1"
					},
					"response": []
				},
				{
					"name": "3.6. Verify Card 1 Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Card updates were saved\", function() {",
									"    pm.expect(responseJson.cardStatus).to.eql(\"Inactive\");",
									"    pm.expect(responseJson.cardHolderName).to.eql(\"John Doe Updated\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/cards/{{card_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"cards",
								"{{card_id_1}}"
							]
						},
						"description": "Verify card 1 was properly updated"
					},
					"response": []
				}
			],
			"description": "Tests for the cards service"
		},
		{
			"name": "4. Loans Service",
			"item": [
				{
					"name": "4.1. Create Loan 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseText = pm.response.text();",
									"",
									"// Generate a loan ID since we can't extract it from response",
									"const loanId = \"L1-\" + new Date().getTime();",
									"pm.environment.set(\"loan_id_1\", loanId);",
									"console.log(\"Created Loan 1 with ID: \" + loanId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"loanId\": \"L1-{{$timestamp}}\",\n    \"loanType\": \"Personal\",\n    \"loanAmount\": \"10000.00\",\n    \"loanStatus\": \"Approved\",\n    \"loanStartDate\": \"2023-01-01\",\n    \"loanEndDate\": \"2028-01-01\",\n    \"loanInterestRate\": \"5.5\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/loans/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"loans",
								"create"
							]
						},
						"description": "Create a new personal loan"
					},
					"response": []
				},
				{
					"name": "4.2. Create Loan 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseText = pm.response.text();",
									"",
									"// Generate a loan ID since we can't extract it from response",
									"const loanId = \"L2-\" + new Date().getTime();",
									"pm.environment.set(\"loan_id_2\", loanId);",
									"console.log(\"Created Loan 2 with ID: \" + loanId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"loanId\": \"L2-{{$timestamp}}\",\n    \"loanType\": \"Home\",\n    \"loanAmount\": \"250000.00\",\n    \"loanStatus\": \"Approved\",\n    \"loanStartDate\": \"2023-02-01\",\n    \"loanEndDate\": \"2053-02-01\",\n    \"loanInterestRate\": \"3.75\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/loans/create",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"loans",
								"create"
							]
						},
						"description": "Create a new home loan"
					},
					"response": []
				},
				{
					"name": "4.3. Get All Loans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function() {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(Array.isArray(responseJson)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/loans/getAll",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"loans",
								"getAll"
							]
						},
						"description": "Get a list of all loans"
					},
					"response": []
				}
			],
			"description": "Tests for the loans service"
		},
		{
			"name": "5. Cleanup",
			"item": [
				{
					"name": "5.1. Delete Accounts",
					"item": [
						{
							"name": "Delete Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Deleted Account ID: \" + pm.environment.get(\"account_id_1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/accounts/{{account_id_1}}",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"accounts",
										"{{account_id_1}}"
									]
								},
								"description": "Delete account 1"
							},
							"response": []
						},
						{
							"name": "Delete Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Deleted Account ID: \" + pm.environment.get(\"account_id_2\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/accounts/{{account_id_2}}",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"accounts",
										"{{account_id_2}}"
									]
								},
								"description": "Delete account 2"
							},
							"response": []
						}
					]
				},
				{
					"name": "5.2. Delete Cards",
					"item": [
						{
							"name": "Delete Card 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Deleted Card ID: \" + pm.environment.get(\"card_id_1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/cards/{{card_id_1}}",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"cards",
										"{{card_id_1}}"
									]
								},
								"description": "Delete card 1"
							},
							"response": []
						},
						{
							"name": "Delete Card 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Deleted Card ID: \" + pm.environment.get(\"card_id_2\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/cards/{{card_id_2}}",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"cards",
										"{{card_id_2}}"
									]
								},
								"description": "Delete card 2"
							},
							"response": []
						}
					]
				},
				{
					"name": "5.3. Delete Customers",
					"item": [
						{
							"name": "Delete Customer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"console.log(\"Deleted Customer ID: \" + pm.environment.get(\"customer_id_1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/customers/{{customer_id_1}}",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"customers",
										"{{customer_id_1}}"
									]
								},
								"description": "Delete customer 1"
							},
							"response": []
						},
						{
							"name": "Delete Customer 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"console.log(\"Deleted Customer ID: \" + pm.environment.get(\"customer_id_2\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/customers/{{customer_id_2}}",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"customers",
										"{{customer_id_2}}"
									]
								},
								"description": "Delete customer 2"
							},
							"response": []
						}
					]
				}
			],
			"description": "Cleanup test data"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "gateway_url",
			"value": "http://localhost:8072",
			"type": "string"
		}
	]
}

